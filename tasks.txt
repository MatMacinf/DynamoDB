aws dynamodb query \
  --table-name Movies \
  --key-condition-expression "#yr = :y AND begins_with(#ttl, :prefix)" \
  --filter-expression "contains(info, :infoSub)" \
  --expression-attribute-names '{"#yr":"year", "#ttl":"title"}' \
  --expression-attribute-values '{":y":{"N":"2020"}, ":prefix":{"S":"The"}, ":infoSub":{"S":"Action"}}' \
  --endpoint-url http://localhost:8000 \
  --no-paginate | jq


-----------------------------------------

  import boto3
from boto3.dynamodb.conditions import Key
dynamodb = boto3.resource('dynamodb', endpoint_url='http://localhost:8000', region_name='us-west-2')
table = dynamodb.Table('Actors')
response = table.scan()

for actor in response['Items']:
    print(actor)
-----------------------------------------
import boto3
Add commentMore actions
from boto3.dynamodb.conditions import Key, Attr
dynamodb = boto3.resource('dynamodb', endpoint_url='http://localhost:8000', region_name='us-west-2')
table = dynamodb.Table('Movies')

response = table.scan(
    FilterExpression=Attr('year').gt(2016) & Attr('title').begins_with('The')
)
for movie in response['Items']:
    print(movie)

-----------------------------------------


import boto3
from boto3.dynamodb.conditions import Key, Attr
dynamodb = boto3.resource('dynamodb', endpoint_url='http://localhost:8000', region_name='us-west-2')
table = dynamodb.Table('Movies')

response = table.scan(
    FilterExpression=Attr('year').gt(2016) & Attr('title').begins_with('The') & Attr('info').contains('Action')
)
for movie in response['Items']:
    print(movie)